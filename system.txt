BRAINFUCK-----------------------------------------------------------------------------------------------------

package main

import (
	"fmt"
	"os"
)

const SIZE = 2048

func main() {
	if len(os.Args) != 2 {
		return
	}
	progpoint := []byte(os.Args[1])
	var arby [SIZE]byte
	pos := 0
	openBr := 0         // opened brackets
	i := 0              // iterates through the source code passed in the argument
	N := len(progpoint) // length of the source code
	for i >= 0 && i < N {
		switch progpoint[i] {
		case '>':
			// Increment the pointer
			pos++
		case '<':
			// decrement the pointes
			pos--
		case '+':
			// increment the pointed byte
			arby[pos]++
		case '-':
			// decrement the pointed byte
			arby[pos]--
		case '.':
			// print the pointed byte on std output
			fmt.Printf("%c", rune(arby[pos]))
		case '[':
			// go to the matching ']' if the pointed byte is 0 (while start)
			openBr = 0
			if arby[pos] == 0 {
				for i < N && (progpoint[i] != byte(']') || openBr > 1) {
					if progpoint[i] == byte('[') {
						openBr++
					} else if progpoint[i] == byte(']') {
						openBr--
					}
					i++
				}
			}
		case ']':
			// go to the matching '[' if the pointed byte is not 0 (while end)
			openBr = 0
			if arby[pos] != 0 {
				for i >= 0 && (progpoint[i] != byte('[') || openBr > 1) {
					if progpoint[i] == byte(']') {
						openBr++
					} else if progpoint[i] == byte('[') {
						openBr--
					}
					i--
				}
			}
		}
		i++
	}
}

----RomanNumbers--------------------------------------------------------------------------------------

package main

import (
	"fmt"
	"os"
	"strconv"
)

func main() {
	arg := "999"
	num, _ := strconv.Atoi(arg)
	res, _ := ToRoman(num)
	romanString := RomanCalculate(res)
	os.Stdout.WriteString(romanString + "\n")
	os.Stdout.WriteString(res + "\n")

}

func ToRoman(n int) (string, error) {
	if n <= 0 || n >= 4000 {
		return "", fmt.Errorf("ERROR: cannot convert to roman digit")
	}

	var result string
	for _, numeral := range RomanNumerals {
		for n >= numeral.Value {
			result += numeral.Symbol
			n -= numeral.Value
		}
	}
	return result, nil
}

func RomanCalculate(roman string) string {
	result := ""
	for i := 0; i < len(roman)-1; i++ {
		if Symbol(string(roman[i])) >= Symbol(string(roman[i+1])) {
			if i == len(roman)-2 {
				result = result + string(roman[i]) + "+" + string(roman[i+1])
			} else {
				result = result + string(roman[i]) + "+"
			}
		} else {
			if i == len(roman)-2 {
				result = result + "(" + string(roman[i+1]) + "-" + string(roman[i]) + ")"
			} else {
				result = result + "(" + string(roman[i+1]) + "-" + string(roman[i]) + ")" + "+"
				i += 1
			}
		}
	}
	return result
}

func Symbol(symbol string) int {
	for _, numeral := range RomanNumerals {
		if numeral.Symbol == symbol {
			return numeral.Value
		}
	}
	return 0
}

type RomanNumeral struct {
	Value  int
	Symbol string
}

// RomanNumerals represents a slice of Roman numerals.
var RomanNumerals = []RomanNumeral{
	{1000, "M"},
	{900, "CM"},
	{500, "D"},
	{400, "CD"},
	{100, "C"},
	{90, "XC"},
	{50, "L"},
	{40, "XL"},
	{10, "X"},
	{9, "IX"},
	{5, "V"},
	{4, "IV"},
	{1, "I"},
}

--------------------ispowerof2----------------------

package main

import (
	"fmt"
	"os"
	"strconv"
)

func isPowerOf2(n int) bool {
	return n != 0 && (n&(n-1)) == 0
}

func main() {
	args := os.Args[1:]
	if len(args) == 1 {
		num, err := strconv.Atoi(args[0])
		if err == nil {
			fmt.Println(isPowerOf2(num))
		}
	}
}